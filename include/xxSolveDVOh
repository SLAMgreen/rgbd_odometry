/**
  SolvePnP.h

  Author : Manohar Kuse
  Date   : 8rd May, 2015

  Defines the class to handle streaming images (RGBD). Implements dense visual odomentry with Inverse compositional formulation
  */


#ifndef ___RGB_ODOMETRY_H___
#define ___RGB_ODOMETRY_H___

#include <ros/ros.h>

#include <Eigen/Dense>
#include <Eigen/Geometry>

#include <opencv2/highgui/highgui.hpp>
#include <opencv2/opencv.hpp>
#include <opencv2/core/eigen.hpp>
#include <cv_bridge/cv_bridge.h>


//#include <rgbd_odometry/RGBDFrame.h>
#include <rgbd_odometry/RGBDFramePyd.h>
#include <sensor_msgs/PointCloud.h>
#include <geometry_msgs/Point32.h>
#include <sensor_msgs/ChannelFloat32.h>






/// Defines the class to handle streaming images and compute 3d-2d PnP of chess board
class SolveDVO
{
public:
    SolveDVO();
    void loop();

    void setCameraMatrix(char* calibFile);


private:
    ros::NodeHandle nh;
    ros::Subscriber sub;

    ros::Publisher pub_pc; ///< Publish point cloud

    //void imageArrivedCallBack( rgbd_odometry::RGBDFrameConstPtr msg );
    void imageArrivedCallBack( rgbd_odometry::RGBDFramePydConstPtr msg );

    cv::Mat rcvd_frame, rcvd_dframe, rcvd_grayMat; ///< Received RGBD data
    Eigen::MatrixXd rcvd_red, rcvd_green, rcvd_blue, rcvd_gray, rcvd_depth; ///< Received red, green, blue, gray, depth in Eigen format
    std::vector<Eigen::MatrixXd> pydRcvdGray, pydRcvdDepthMap;     ///< Pyramidals of `rcvd_grayMat` and `dframe`

    bool isFrameAvailable;


    // Camera params
    bool cameraIntrinsicsReady;
    cv::Mat cameraMatrix, distCoeffs;
    Eigen::Matrix3d K, K_inv; //same as cameraMatrix
    double fx, fy, cx, cy;







    // Publish
    void publishCurrentPointCloud();
    void publishBowl();
    void imshowEigenImage( const char * winName, Eigen::MatrixXd eim );


};





#endif //___RGB_ODOMETRY_H___
